package com.jdc.spring.jdbc;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

@TestMethodOrder(OrderAnnotation.class)
public class GettingStart {
	
	private static final String URL = "jdbc:h2:mem:TestDB";
	private static final String USERNAME = "username";
	private static final String PASSWORD = "password";
	static Connection connection;

	@BeforeAll
	static void beforeAll() throws SQLException {
	    
	    // Get Connection
	    connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);
	    
	    // Create Table
	    var accountTableDDL = """
	            create table ACCOUNT(
	                id int GENERATED BY DEFAULT AS IDENTITY,
	                name varchar(40) not null,
	                phone varchar(12) not null
	            );
	            """;
	    
	    try(var statement = connection.createStatement()){
	        statement.execute(accountTableDDL);
	    }
	    
	}
	
	@Order(1)
	@ParameterizedTest
	@CsvSource({
		"Myint Myat, 0942461324, 1",
		"Your Dad, 0932423424, 2",
		"Your Mom, 09324234, 3"
	})
	void test_insert(String name, String phone, int expectedId) {
		
		var sql = "INSERT INTO ACCOUNT(name, phone) values (?, ?)";
		
		// Prepare Statement
		try(var stmt = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)){
			
			// Set Parameter
			stmt.setString(1, name);
			stmt.setString(2, phone);

			// Execute Statement 
			stmt.executeUpdate();
			
			// Get Generated Primary Key
			var rs = stmt.getGeneratedKeys();
			
			if(rs.next()) {
				var pk = rs.getInt(1);

				// Check Result
				assertEquals(expectedId, pk);
			}
		
			
		}catch(SQLException e) {
			
		}
				
	}
	
	@Order(2)
	@Test
	void test_select_count() {

	    var sql = "select count(*) from ACCOUNT";

	    try (var stmt = connection.prepareStatement(sql)) {

	        var rs = stmt.executeQuery();

	        if (rs.next()) {
	            var count = rs.getLong(1);
	            assertEquals(3L, count);
	        }

	    } catch (SQLException e) {
	        e.printStackTrace(); // Print the SQL error for easier debugging
	        fail("SQL execution failed: " + e.getMessage()); // Fail the test if SQL fails
	    }
	}


	@Order(3)
	@ParameterizedTest
	@CsvSource({
		"Myint Myat, 0942461324, 1",
		"Your Dad, 0932423424, 2",
		"Your Mom, 09324234, 3"
	})
	void test_find_by_id(String name, String phone, int id) {
		
		var sql = "SELECT * FROM  ACCOUNT where id = ? ";
		
		try( var stmt = connection.prepareStatement(sql)){
			
			stmt.setInt(1, id);
			
			var rs = stmt.executeQuery();
			
			if(rs.next()) {
				var nameColumn = rs.getString("name");
				var phoneColumn = rs.getString("phone");
				
				assertEquals(name , nameColumn);
				assertEquals(phone , phoneColumn);
				
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	static void afterAll() throws SQLException {

		// Close Connection
		if(connection != null) {
			connection.close();
		}
	}

}
